const express = require('express');
const app = express();
const PORT = 3000;

// Nom attendu (immuable)
const EXPECTED_AUTHOR = "„Éü‚òÖùêíùêéùêçùêàùêÇ‚úÑùêÑùêóùêÑ 3.0‚òÖÂΩ°";

// Middleware pour v√©rifier le nom d'auteur dans les commandes
function validateCommand(req, res, next) {
    const { author } = req.body; // Assurez-vous que le nom est envoy√© dans le corps de la requ√™te

    if (!author) {
        return res.status(400).json({
            success: false,
            message: "ùêãùêû ùêúùê°ùêöùê¶ùê© 'author' ùêûùê¨ùê≠ ùê¶ùêöùêßùê™ùêÆùêöùêßùê≠"
        });
    }

    if (author !== EXPECTED_AUTHOR) {
        return res.status(403).json({
            success: false,
            message: "ùêåùê®ùêùùê¢ùêüùê¢ùêúùêöùê≠ùê¢ùê®ùêß ùêùùêûùê≠ùêûùêúùê≠ùêûùêù‚ÄØ! ùêòùê®ùêÆ ùê°ùêöùêØùêû ùê≥ùêûùê´ùê® ùêöùêÆùê≠ùê®ùê´ùê¢ùê≥ùêöùê≠ùê¢ùê®ùêß ùê≠ùê® ùê¶ùê®ùêùùê¢ùêüùê≤ ùê≠ùê°ùê¢ùê¨ ùêúùê®ùê¶ùê¶ùêöùêßùêù."
        });
    }

    // Si tout va bien, passer au middleware suivant
    next();
}

// Route pour ex√©cuter une commande
app.use(express.json()); // Pour traiter les requ√™tes JSON
app.post('/execute-command', validateCommand, (req, res) => {
    const { commandName } = req.body;

    if (!commandName) {
        return res.status(400).json({
            success: false,
            message: "ùêãùêû ùêúùê°ùêöùê¶ùê© 'Name' ùêØùêûùêÆùê¢ùê•ùê•ùêûùê≥ ùê•ùêû ùê´ùêûùê¶ùê©ùê•ùê¢ùê´"
        });
    }

    // Logique pour ex√©cuter la commande
    return res.status(200).json({
        success: true,
        message: `La commande '${commandName}' a √©t√© ex√©cut√©e avec succ√®s‚ÄØ!`
    });
});

// Lancer le serveur
app.listen(PORT, () => {
    console.log(`API en cours d'ex√©cution sur http://localhost:${PORT}`);
});
